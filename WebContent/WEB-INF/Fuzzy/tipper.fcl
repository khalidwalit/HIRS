// Block definition (there may be more than one block per file)
FUNCTION_BLOCK tipper

// Define input variables
VAR_INPUT
	age : REAL;
	jobclass : REAL;
	monthlypayment : REAL;
	smokingstatus : REAL;
	quitduration : REAL;
	illness : REAL;
	gender : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    package : REAL;
END_VAR

// Fuzzify input variable 'service'
FUZZIFY age
    TERM young := (0, 1) (8, 1) (13, 0) ; 
    TERM tenage := (12, 0) (16, 1) (20, 0);
    TERM adult := (19, 0) (25, 1) (31, 0);
    TERM mature := (30, 0) (31, 1) (38, 1);
END_FUZZIFY

// Fuzzify input variable 'service'
FUZZIFY illness
    TERM normal := (0, 1) (8, 1) (13, 0) ; 
    TERM mild := (12, 0) (16, 1) (20, 0);
    TERM severe := (19, 0) (25, 1) (31, 1);
    
END_FUZZIFY

// Fuzzify input variable 'food'
FUZZIFY jobclass
    TERM jobclass1 := (0, 1) (1, 1) (3, 0) ;
    TERM jobclass2 := (2, 0) (3.5, 1) (5, 0);
    TERM jobclass3 := (4, 0) (5.5, 1) (7, 0);
    TERM jobclass4 := (6, 0) (7.5, 1) (9, 1);
END_FUZZIFY

FUZZIFY monthlypayment
    TERM low := (100, 1) (200, 1) (300, 0) ;
    TERM medium := (301, 0) (400, 1) (500, 0);
    TERM high := (501, 0) (600, 1) (700, 0);
    TERM veryhigh := (701, 0) (800, 1) (900, 1);
END_FUZZIFY

FUZZIFY smokingstatus
    TERM yes := (0, 1) (1, 1) (3, 0) ;
    TERM no := (3, 0) (4.5, 1) (6, 0);
    TERM quit:= (6, 0) (7, 1) (9, 1);
END_FUZZIFY

FUZZIFY quitduration
    TERM stage1 := (0, 1) (1, 1) (2, 0) ;
    TERM stage2 := (1, 0) (2, 1) (3, 0);
    TERM stage3 := (2, 0) (3, 1) (4, 0);
    TERM stage4 := (3, 0) (4, 1) (5, 1);
END_FUZZIFY

FUZZIFY gender
    TERM male := (0, 1) (1, 1) (2, 0) ;
    
    TERM female := (2, 0) (3, 1) (4, 1);
    
END_FUZZIFY

// Defzzzify output variable 'tip'
DEFUZZIFY package
    TERM low := (0,0) (20,1) (40,0);
    TERM normal := (20,0) (50,1) (80,0);
    TERM high := (60,0) (80,1) (100,1);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;
	
	RULE 1 : IF age IS young AND jobclass IS jobclass1 AND smokingstatus IS yes OR illness IS normal AND gender IS female AND monthlypayment IS low
	THEN package IS low;
				
	RULE 2 : IF age IS young AND jobclass IS jobclass1 AND smokingstatus IS yes AND illness IS normal
				THEN package IS normal;
				
	RULE 3 : IF age IS young AND jobclass IS jobclass1 AND smokingstatus IS yes OR illness IS normal
				THEN package IS high;
END_RULEBLOCK

END_FUNCTION_BLOCK